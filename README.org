#+title: Building a Server with Rust
#+AUTHOR: Dang Quang Vu

* Getting Started
** Introduction
- Đầu tiên để có thể sử dụng tốt một ngôn ngữ nào đó thì chúng ta phải biết các
  công cụ (tool) phổ biến của ngôn ngữ đó. Tool là yếu tố chính của trải nghiệm
  sử dụng một ngôn ngữ nào đó.
- Do đó bộ tool nên được coi là mối quan tâm hàng đầu khi thiết kế một ngôn ngữ
  nào đó và giảng dạy nó.
- Cộng đồng Rust đã đặt việc phát triển các Tool hỗ trợ kể từ ngày đầu thành
  lập, bây giờ chúng ta sẽ dạo một vòng ngắn gọn một số bộ công cụ và tiện ích
  sẽ hữu ích trong hành trình học rust của chúng ta. Một số nó được xây dựng bởi
  các nhà phát triên Rust, và phần lớn được xây dựng và duy trì bởi cộng đồng.
** Intall the Rust ToolChain
*** Install
- Install Rust:
#+begin_src
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#+end_src

- Khi cài đặt Rust bạn sẽ được cài luôn bộ công cụ của Rust là rustup được mặc
  định.
*** Compilation Targets
- Mục đích chính của trình biên dịch Rust là chuyển đổi mã Rust thành =Machine
  Code=, một tập hợp các lệnh hướng dẫn mà CPU và OS của bạn có thể hiểu được.
- Do đó, bạn cần một phần phụ trợ backend khác của Rust Compiler cho mỗi target
  biên dịch, tức là mỗi nền tảng như Linux, MacOs hay Window64-bits bạn phải cài
  một bộ phụ trợ khác.
- Rust cố gắng hỗ trợ một loạt các platform khác nhau thành các cấp bậc, từ cấp
  1 "Guaranteed-to-work" tới Level 3 "Best-effort"
  + Bạn có thể xem bản full tại đây [[https://doc.rust-lang.org/nightly/rustc/platform-support.html][Here]]

*** What Toolchains Do we need?
- Bạn có thể cập nhập hoặc cài đặt toolchain thông qua rustup, ngoài ra rustup
  còn giúp bạn có cài nhìn tổng quan về những cái mà bạn đã cài đặt trên hệ
  thống của bạn.
- Bạn có thể kiểm tra các toolchain bằng cách sử dụng CL:
  #+begin_src
rustc --version
  #+end_src

  #+begin_src
cargo --version
  #+end_src

** Project Setup
*** Init Projects
- Bạn có thể khởi tạo một dự án rust thông qua cargo-cli:
  #+begin_src
cargo new nameproject
  #+end_src

*** Optimization Project
**** Inner Development Loop
- Trong khi thực hiện project chúng ta sẽ thường lặp lại các bước giống nhau:
  + Chỉnh sửa Code
  + Compile the Application
  + Running Test
  + Run the Application
- Đây được gọi là =inner development loop=
  + Nếu mất 5 phút để compile và run app, bạn có thể hoàn thành nhiều nhất 12
    lần lặp trong 1 giờ. Nếu bạn giảm nó xuống còn 2 phút thì bạn có thể thực
    hiện 30 lần lặp lại trong 1 giờ.
  + Rust nó không giúp chúng ta làm được điều này - Tốc độ biên dịch của Rust có
    thể trở thành một nút thắc cổ trai trong các dự án lớn. Hãy xem chúng ta có
    thể làm được gì để giảm thiểu vấn đề này trước khi tiêp tục nhé.
**** Faster Linking
- Khi nghỉ tới =inner development loop= bạn sẽ cố gắng xem xét vấn đề hiệu suất
  của quá trình compile - mất bao lâu để xây dựng lại binary file sau khi thay
  đổi 1 điều gì đó trong source code.
- Một khoảng thời gian lớn trong đó được dành cho =linking phase - assembling= các
  tệp binary ở output.
- Trình liên kết mặc định hoạt động cũng tốt, nhưng chúng ta sẽ có các lựa chọn
  thay thế nhanh hơn tuỳ thuộc vào OS của các bạn.

  #+begin_src
# .cargo/config.toml

# On Windows
# ```
# cargo install -f cargo-binutils
# rustup component add llvm-tools-preview
# ```
[target.x86_64-pc-windows-msvc]
rustflags = ["-C", "link-arg=-fuse-ld=lld"]
[target.x86_64-pc-windows-gnu]
rustflags = ["-C", "link-arg=-fuse-ld=lld"]

# On Linux:
# - Ubuntu, `sudo apt-get install lld clang`
# - Arch, `sudo pacman -S lld clang`
[target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "linker=clang", "-C", "link-arg=-fuse-ld=lld"]

# On MacOS, `brew install michaeleisel/zld/zld`
[target.x86_64-apple-darwin]
rustflags = ["-C", "link-arg=-fuse-ld=/usr/local/bin/zld"]
[target.aarch64-apple-darwin]
rustflags = ["-C", "link-arg=-fuse-ld=/usr/local/bin/zld"]
  #+end_src

**** Cargo-watch
- Chúng ta có thể giảm thiểu được thêm 1 ít thời gian bằng các giảm thời gian
  thực hiện compile. Thay vì bạn sẽ phải vào terminal thực hiện lệnh compile
  hoặc check, thì bạn có thể sử dụng cargo watch để tự động làm điều đó tương tự
  như nodemon trong express.
- Cài đặt Cargo-watch
  #+begin_src
cargo install cargo-watch
  #+end_src
- Cargo watch sẽ quan sát sources code của bạn nếu có thay đổi nó sẽ kích hoạt
  mỗi lệnh bạn muốn chạy. Ví dụ:
  #+begin_src
cargo watch -x check
  #+end_src
  + Nó sẽ giúp bạn chạy lệnh check sau khi bạn có sự thay đổi nào đó trong
    source code.
- Check - test - run
#+begin_src
cargo watch -x check -x test -x run
#+end_src
  + Nó sẽ giúp bạn chạy lệnh check sau đó tới test và run sau khi bạn có sự thay đổi nào đó trong
    source code với điều kiện các lệnh trước được hoàn thành.

